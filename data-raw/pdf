<h1 id="this-script-data-rawadmiral_verify_templates.r">This script:
data-raw/admiral_verify_templates.R</h1>
<h1 id="assumptionsquestions">Assumptions/Questions:</h1>
<h1 id="ignore-.rda-files-in-admiraldata-per-ben">- ignore *.rda files
in admiral/data (per Ben)</h1>
<h1 id="compares-full-adam---ie-all-rows">- compares full ADaM - ie all
rows</h1>
<h1 id="for-developer-use-and-developer-has-run-load_all">- for
developer use and developer has run load_all()</h1>
<h1 id="use-cli-for-messageserrors---yes">- use cli:: for
messages/errors - YES</h1>
<h1 id="most-datasets-are-stored-as-.rda-files">- most datasets are
stored as .rda files</h1>
<p>#’ Directories used to find files:</p>
<p>#’ cache_dir #’ diff_dir #’ tempdir() #’ template_dir location of
template R files (inst/templates) #’ adam_new_dir (aka tempdir() or
cache_dir ): after running, templates place new ADaMs here #’
adam_old_dir : ADaMs downloaded from pharamverseadam</p>
<p>#’ Named vectors/lists, use adam_name to name #’ #’ adam_names (named
character vector) #’ path (named list) #’ keys (named list) #’ obj
(named list) #’ templates (named list)</p>
<p>#’ <span class="citation" data-cites="param">@param</span>
adams_names character vector. ADaM or CDISC name, without prefix or
suffix (ex: adlb)</p>
<h2
id="discuss-several-named-vectors-use-single-tibble-as-lookup">DISCUSS,
several named vectors, use single tibble as lookup?</h2>
<p>#’ <span class="citation" data-cites="param">@param</span>
template_dir Path to templates in the active package (load_all()) #’
(“inst/directory) #’ <span class="citation"
data-cites="param">@param</span> cache_dir (cache) Path to cache.
(varies by OS/configuration) #’ ~/.config/R/admiral_templates_data #’
<span class="citation" data-cites="param">@param</span> adam_old_dir
temporary directory where old ADaMs #’ (downloaded from github.com) are
stored #’ <span class="citation" data-cites="param">@param</span>
adam_new_dir temporary directory where new ADaMs #’ (created by
templates) are stored</p>
<p>#’ <span class="citation" data-cites="title">@title</span>
verify_templates #’ <span class="citation"
data-cites="param">@param</span> pkg package (currently only admiral) #’
<span class="citation" data-cites="param">@param</span> ds character
vector of ADaM names. Corresponds to templates to run.<br />
#’ A subset of adam_names. #’ <span class="citation"
data-cites="description">@description</span>: #’ Generates ADaM from
templates and compares to previously generated ADaM file. #’ (The latter
are found in https:://github.com main branch pharmaverseadam). #’ #’
Much code taken from pharamavreseadam::create_adams_data.R #’
(https://github.com/pharmaverse/pharmaverseadam/blob/main/data-raw/create_adams_data.R)
#’ #’ USAGE: verify_templates() #’ #’ <span class="citation"
data-cites="export">@export</span> verify_templates &lt;- function(pkg =
“admiral”, ds = c(“adae”)) { # TODO: delete all prior ADaM downloads #
ASSUME: (1) user is running script for 1st time and no temporary
directories exist, OR # (2) user is running script a 2nd time, in same
session, and now must remove directories</p>
<p>clean_cache() # clear all..</p>
<p>pkg &lt;- “admiral” if (pkg != “admiral”) cli_abort(“Currently only
<code>admiral</code> package is supported”)</p>
<p># nolint start library(pkg, character.only = TRUE) library(teal.data)
library(purrr) library(cli) # nolint end cli_alert(“Generating ADaMs for
{ pkg} package.”)</p>
<p>path &lt;- create_directories()</p>
<p># gather templates —- templates &lt;- list.files(path$template_dir,
pattern = “ad_”)</p>
<p># from templates generate vector of adam_names adam_names &lt;-
vapply(templates, function(x) gsub(“ad_|\.R”, ““, x), USE.NAMES = FALSE,
character(length = 1) )</p>
<p># check if (length(templates) != length(adam_names))
cli_abort(“Number of templates and adam_names differ”)</p>
<p># templates is a named chr[] names(templates) &lt;- adam_names</p>
<p># User specified templates in <code>ds</code>. Limit to these
templates. adam_names &lt;- adam_names[adam_names %in% ds]</p>
<p># per Ben, ignore “adlbhy” adam_names &lt;- adam_names[adam_names !=
“adlbhy”]</p>
<p># download, saved prior ADaMs from pharmaverseadam as .rda files
cli_inform(“—- Begin downloading from github pharmaverseadam”)
download_adam_old(adam_names, path = path$adam_old_dir)</p>
<p>cli_inform(“—- Run templates”)</p>
<p># one adam at a time compare_list &lt;- purrr::map(adam_names,
.progress = TRUE, function(adam) { cli_inform(“Template running for
{adam}”) run_template(adam, dir = path<span
class="math inline">$template_dir)  # retrieve *.rda file in cache; copy
to correct directory  dataset_new &lt;-
load_rda(paste0(path$</span>cache_dir, “/”, adam, “.rda”)) file.copy(
file.path(path<span class="math inline">$cache_dir, paste0(adam,
".rda")),  file.path(path$</span>adam_new_dir, paste0(adam, “.rda”)) )
dataset_old &lt;- get_dataset_old(adam, path$adam_old_dir)</p>
<pre><code># compare the generated dataset to the reference dataset from github
res = compare(
  base = dataset_old,
  compare = dataset_new,
  keys = teal.data::default_cdisc_join_keys[[adam]],
  file = paste0(path$diff, &quot;/&quot;, adam, &quot;.txt&quot;)
)

browser()</code></pre>
<p># logical vector issues &lt;- diffdf::diffdf_has_issues(res) |&gt;
unlist() if (issues) cli_abort(c(“Issues found in {adam}”)) })</p>
<p># finally, display differences display_diff(dir = path$diff) }</p>
<p>#———————— helper functions</p>
<p>#’ Display Results of running diffdf #’ #’ Reads all text files in a
specified directory and returns their contents in a named list. #’ Each
entry in the list contains the lines of one file as a character vector,
and the #’ entry is named after the file. #’ #’ <span class="citation"
data-cites="param">@param</span> dir A character string specifying the
path to the directory containing the text files. #’ #’ <span
class="citation" data-cites="return">@return</span> A named list. Each
element is a character vector giving the lines of a file; #’ the names
of the list correspond to the individual filenames. #’ #’ <span
class="citation" data-cites="examples">@examples</span> #’ #’ #’ <span
class="citation" data-cites="param">@param</span> dir Directory with
<code>diff</code> files, one for each ADaM display_diff &lt;-
function(dir = NULL) { # Open connection to log file log_file &lt;-
file(“verify_template_comparisons.txt”, “a”)</p>
<p>files &lt;- list.files(dir, full.names = TRUE) contents &lt;-
lapply(files, readLines) names(contents) &lt;- basename(files)</p>
<p>map2( names(contents), contents, function(name, content) { header
&lt;- paste(“Differences found for”, str_replace_all(name, “.txt”, ““),”
“, today(),”“)</p>
<pre><code>  # Display to console
  cli::cli_h1(header)
  cat(paste(content, collapse = &quot;\n&quot;))

  # Write to log file
  writeLines(header, log_file)
  writeLines(paste(content, collapse = &quot;\n&quot;), log_file)
  writeLines(&quot;\n&quot;, log_file) # Add separator between entries
}</code></pre>
<p>)</p>
<p># Close the file connection close(log_file) invisible(NULL) } #’
<span class="citation" data-cites="description">@description</span>:
loads saved rda file <code>filename</code> and returns the dataset
load_rda &lt;- function(filename) { load(filename) get(ls()[ls() !=
“filename”]) # returns dataset }</p>
<p>#’ <span class="citation"
data-cites="description">@description</span> saves the dataset to a
specified file path save_rda &lt;- function(data, file_path, new_name) {
# new_name must include .rda if (missing(new_name)) { save(data, file =
file_path, compress = “bzip2”) } } #’ #’ Loads and compares datasets
using diffdf #’ #’ <span class="citation"
data-cites="desciption">@desciption</span> Uses <code>diffdf</code> to
compare two datasets #’ This package loads saved old rda files
(generated from <code>get_dataset_old</code>) and uses #’ diffdf to
compare this data with a new dataset generated by
<code>get_dataset_new</code> #’ or a base for comparison. #’ #’ Usage #’
#’ # Load two datasets using default comparison options #’
get_dataset_new(“path/to/adam.name.rda”) #’ #’ # Use custom comparison
as file (e.g., with label files to be removed) #’ compare( #’ # The base
for the comparison - a generic dataset object #’ new_dataset =
load_rda(path/to/base.object.rda), #’ #’ # A file containing label
information to remove from attributes of the datasets #’
compare_file=get_R_data_path(“_label_files/“) #’ <span class="citation"
data-cites="param">@param</span> base name of the old ADaM dataset #’
<span class="citation" data-cites="param">@param</span> compare name of
the new ADaM dataset #’ <span class="citation"
data-cites="param">@param</span> keys set of keys to link the two
datasets (optional) #’ <span class="citation"
data-cites="param">@param</span> file name of file to hold result of
<code>diffdf</code></p>
<p>compare &lt;- function(base, compare, keys, file = NULL) { # DISCUSS
———————— # Default: datasets are in tmp directories and not saved # To
debug: useful to have easy access to datasets in (1) global env e &lt;-
globalenv() e<span
class="math inline"><em>o</em><em>l</em><em>d</em> &lt;  − <em>b</em><em>a</em><em>s</em><em>e</em><em>e</em></span>new
&lt;- compare e<span class="math inline">$file &lt;- file  # OR (2)
saved a directory?  # nolint start  # saveRDS(e$</span>old,file=
paste0(“old”, “.RDS”)) # temporary # saveRDS(e$new,file= paste0(“new”,
“.RDS”)) # nolint end # ————————</p>
<p># remove column attributes for (name in names(base)) {
attr(base[[name]], “label”) &lt;- NULL } for (name in names(compare)) {
attr(compare[[name]], “label”) &lt;- NULL } comparison &lt;- tryCatch( {
diffdf::diffdf( base = base, compare = compare, keys = keys, file =
file, suppress_warnings = TRUE # for now ) }, error = function(e)
message(“Error in diffdf:”, e$message) ) ## end tryCatch comparison } ##
end compare</p>
<p>#’ <span class="citation"
data-cites="description">@description</span>: removes the cache
directory clean_cache &lt;- function() { cache_dir &lt;-
tools::R_user_dir(“admiral_templates_data”, which = “cache”)
adam_new_dir &lt;- fs::path(tempdir(), “adam_new_dir”) adam_old_dir
&lt;- fs::path(tempdir(), “adam_old_dir”) diff &lt;- fs::path(tempdir(),
“diff”)</p>
<p>path = c(cache_dir, adam_new_dir, adam_old_dir, diff)</p>
<p>lapply(path, function(e) { if (dir.exists(e)) { unlink(e, recursive =
TRUE) message(“Directory deleted:”, e) } })</p>
<p>} #’ Downloads ADaM datasets from pharmaverseadam #’ <span
class="citation" data-cites="param">@param</span> adam_names character
vector Set of ADaMs to download. #’ <span class="citation"
data-cites="param">@param</span> path Character string. Directory to
save downloaded ADaMs. download_adam_old &lt;- function(adam_names, path
= NULL) { lapply(adam_names, function(adam) { githubURL &lt;- paste0( #
nolint
“https://github.com/pharmaverse/pharmaverseadam/raw/refs/heads/main/data/”,
adam, “.rda?raw=true” ) cat(“Downloading:”, adam, “”) download.file( url
= githubURL, quiet = TRUE, destfile = paste0(path, “/”, adam, “.rda”),
mode = “wb” ) }) }</p>
<p>#’ Loads an ADaM dataset from a saved RDA file on disk. #’ #’ <span
class="citation" data-cites="param">@param</span> adam Character string.
Name of the ADaM dataset to retrieve from #’ disk (without file
extension). #’ <span class="citation" data-cites="param">@param</span>
path Character string. Path to the directory containing the #’ stored
ADaM file. #’ <span class="citation" data-cites="return">@return</span>
The loaded dataset (as an R object). #’ #’ <span class="citation"
data-cites="examples">@examples</span> #’ get_dataset_old &lt;-
function(adam, path) { adam_old &lt;- load_rda(file.path(path,
paste0(adam, “.rda”))) }</p>
<p>#’ Load a Saved ADaM Dataset</p>
<p>#’ Loads an ADaM dataset from in saved RDA file on disk. #’ <span
class="citation" data-cites="param">@param</span> adam Character string.
Name of the ADaM dataset to retrieve #’ from disk (without file
extension). #’ <span class="citation" data-cites="param">@param</span>
path Character string. Path to the directory containing #’ the stored
ADaM file. #’ #’ <span class="citation"
data-cites="return">@return</span> The loaded dataset (as an R object).
get_dataset_new &lt;- function(adam, path = NULL) {
load_rda(paste0(path, “/”, adam, “.rda”)) adam_new &lt;- get(adam) } #’
Uses source() to run a template #’ #’ <span class="citation"
data-cites="param">@param</span> adam Character string. Run the template
associated with this ADaM name. #’ <span class="citation"
data-cites="param">@param</span> dir Character string. Directory where
templates are stored. #’ <span class="citation"
data-cites="return">@return</span> results of running template #’ <span
class="citation" data-cites="description">@description</span> runs the
template for the specified ADaM run_template &lt;- function(adam, dir =
NULL) { source(paste0(dir, “/ad_”, adam, “.R”)) # nolint }</p>
<h1
id="since-this-is-script-and-not-package-r-function-it-must-be-loadedsourced-separately.">Since
this is script, and not package R function it must be loaded/sourced
separately.</h1>
<h1
id="the-next-line-runs-the-entire-process-after-this-file-is-sourced.">The
next line runs the entire process after this file is sourced.</h1>
<h1 id="verify_templates-nolint">verify_templates() # nolint</h1>
<p>#’ create_directories #’ #’ <span class="citation"
data-cites="return">@return</span> list of paths to directories
create_directories &lt;- function() { cli_inform(“Creating temporary
directories”) x &lt;- tempdir() dir.create(file.path(x, “old”),
showWarnings = FALSE) dir.create(file.path(x, “new”), showWarnings =
FALSE) dir.create(file.path(x, “diff”), showWarnings = FALSE)</p>
<p>list( template_dir = “inst/templates”, cache_dir =
tools::R_user_dir(“admiral_templates_data”, which = “cache”),
adam_new_dir = file.path(x, “new”), adam_old_dir = file.path(x, “old”),
diff = file.path(x, “diff”) ) }</p>
